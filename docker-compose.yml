# A股九转序列识别系统 - Docker Compose配置
version: '3.8'

services:
  # 主应用服务
  td-analysis:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: td_analysis_app
    restart: unless-stopped
    ports:
      - "80:80"
      - "5000:5000"
    volumes:
      # 数据持久化
      - ./data:/app/data
      - ./html_charts:/app/html_charts
      - ./logs:/app/logs
      # 配置文件
      - ./config.yaml:/app/config.yaml:ro
    environment:
      - FLASK_ENV=production
      - PYTHONPATH=/app
      - TZ=Asia/Shanghai
    networks:
      - td_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: td_analysis_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - td_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 数据库服务（可选）
  postgres:
    image: postgres:15-alpine
    container_name: td_analysis_db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: td_analysis
      POSTGRES_USER: tduser
      POSTGRES_PASSWORD: td_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - td_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tduser -d td_analysis"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务
  prometheus:
    image: prom/prometheus:latest
    container_name: td_analysis_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - td_network
    profiles:
      - monitoring

  # 可视化监控
  grafana:
    image: grafana/grafana:latest
    container_name: td_analysis_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - td_network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # 日志收集
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: td_analysis_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - td_network
    profiles:
      - logging

  # 日志可视化
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: td_analysis_kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - td_network
    depends_on:
      - elasticsearch
    profiles:
      - logging

  # 反向代理（生产环境）
  nginx-proxy:
    image: nginx:alpine
    container_name: td_analysis_proxy
    restart: unless-stopped
    ports:
      - "443:443"
    volumes:
      - ./docker/nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    networks:
      - td_network
    depends_on:
      - td-analysis
    profiles:
      - production

networks:
  td_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local